from config import *
from testsql import *
from telethon import TelegramClient, events
from telethon import Button
import threading
import emoji
import random
import asyncio


bot = TelegramClient('bot', API_ID, API_HASH).start(bot_token=API_TOKEN)

@bot.on(events.NewMessage(pattern='/locations'))
async def locations_handler(event):
    user_id = event.sender_id
    username = get_username_from_database(user_id)

    locations_buttons = [
        Button.inline("–û–∑–µ—Ä–æ", b"ozero"),
    ]

    response = f"–≠—Ç–æ –º–µ–Ω—é –ª–æ–∫–∞—Ü–∏–π, {username}üî•!"
    await event.respond(response, buttons=locations_buttons)

@bot.on(events.CallbackQuery(data=b"ozero_random"))
async def start_fishing_handler(event):
    sender_id = event.sender_id
    fish = get_fish_from_database(sender_id)
    rand_fish = random.randint(0, 2)
    update_user_fish(sender_id, fish + rand_fish)

    await event.respond("üé£(30 —Å–µ–∫—É–Ω–¥...)")

    await asyncio.sleep(30)

    response = f"–í—ã –ø–æ–π–º–∞–ª–∏ {rand_fish} —Ä—ã–±(—ã)! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {fish + rand_fish} —Ä—ã–±(—ã)!"
    
    await event.respond(response)

@bot.on(events.CallbackQuery())
async def locations_callback_handler(event):
    sender_id = event.sender_id
    horse = get_horse_from_database(sender_id)
    fish = get_fish_from_database(sender_id)

    if event.data == b"ozero":
        if not horse:
            await event.respond("–£ –≤–∞—Å –Ω–µ—Ç –ª–æ—à–∞–¥–∏, —á—Ç–æ–±—ã –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –æ–∑–µ—Ä–∞!")
            return
        
        # –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ–µ–∑–¥–∫–∏
        response1 = "üêé"
        await event.respond(response1)
        await asyncio.sleep(3)

        ozero_buttons = [
            Button.inline("–î–∞!", b"ozero_random"),
            Button.inline("–ú–µ–Ω—é", b"menub"),
        ]
        response = f"–í—ã –ø—Ä–∏–µ—Ö–∞–ª–∏ –∫ \"–æ–∑–µ—Ä—É\" –¥–ª—è –ª–æ–≤–ª–∏ —Ä—ã–±—ã, —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä—ã–±–∞—á–∏—Ç—å?\n\nüêü: {fish}"
        await event.respond(response, buttons=ozero_buttons)

    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∞!"
    if event.data == "ozero_random":
        rand_fish = random.randint(0, 2)
        update_user_fish(sender_id, fish + rand_fish)
        response = f"–í—ã –ø–æ–π–º–∞–ª–∏ {rand_fish} —Ä—ã–±(—ã)! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {fish + rand_fish} —Ä—ã–±(—ã)!"
        await event.respond(response)
    

@bot.on(events.NewMessage(pattern='/quests'))
async def quests_handler(event):
    user_id = event.sender_id
    username = get_username_from_database(user_id)

    quest_buttons = [
        Button.inline("2 üêì", b"Quest_1"),
    ]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = (
        f"üëãüèª–ü—Ä–∏–≤–µ—Ç {username}, —ç—Ç–æ –º–µ–Ω—é –∫–≤–µ—Å—Ç–æ–≤üî•!"
    )
    await event.respond(response, buttons=quest_buttons)

@bot.on(events.CallbackQuery())
async def quests_callback_handler(event):
    sender_id = event.sender_id

    if event.data == b"Quest_1":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        chickens = get_chickens_from_database(sender_id)
        balance = get_balance_from_database(sender_id)
        quest1 = get_quest1(sender_id)

        if quest1 == 1:
            await event.answer("–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ 1 –∫–≤–µ—Å—Çüò°!")

        elif chickens >= 2:
            update_user_balance(sender_id, balance + 500)
            update_user_exp(sender_id, get_exp_from_database(sender_id) + 5)
            update_user_quest1(sender_id, quest1 + 1)
            await event.answer("–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ 1 –∫–≤–µ—Å—Çüéâ!")
        else:
            await event.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—É—Ä–∏—Üüêî")
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
@bot.on(events.NewMessage(pattern='/profile'))
async def profile_handler(event):
    sender_id = event.sender_id
    username = get_username_from_database(sender_id)
    if not username:
        response = "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –Ω–∞–±—Ä–∞–≤ –∫–æ–º–∞–Ω–¥—É /start"
        await event.respond(response)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    balance = get_balance_from_database(sender_id)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cows = get_cows_from_database(sender_id)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    goats = get_goats_from_database(sender_id)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–ª–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    milk = get_milk_from_database(sender_id)

    egg = get_egg_from_database(sender_id)

    chicken = get_chickens_from_database(sender_id)

    horse = get_horse_from_database(sender_id)

    meat = get_meat_from_database(sender_id)

    exp = get_exp_from_database(sender_id)

    lvl = get_lvl_from_database(sender_id)

    fish = get_fish_from_database(sender_id)


    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = (
        f"üë®‚Äçüåæ–ü—Ä–æ—Ñ–∏–ª—å: @{username} lvl:{lvl}üë©‚Äçüåæ\n\n"
        f"--------------------~~~--------------------\n"
        f"üí∞–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}$\n\n"
        f"–í–∞—à–∏ –∂–∏–≤–æ—Ç–Ω—ã–µ:\n"
        f"üêÑ: {cows} üêé: {horse}\n"
        f"üêê: {goats} üêì: {chicken}\n\n"
        f"–í–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:\n"
        f"ü•ö: {egg} ü•©: {meat}\n"
        f"ü•õ: {milk} üêü: {fish}\n\n"
        f"üåæ: {exp} \n\n"
        f"By @shinogizxc1 ü´ß"
    )

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    menu_buttons = [
        Button.url("–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", url="https://t.me/jesshigashikata")
    ]
 # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
    menu_keyboard = [menu_buttons]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    if menu_buttons:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –º–µ–Ω—é
        await event.respond(response, buttons=menu_keyboard)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await event.respond(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shop
@bot.on(events.NewMessage(pattern='/shop'))
async def shop_handler(event):
    sender_id = event.sender_id
    username = get_username_from_database(sender_id)
    if not username:
        response = "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –Ω–∞–±—Ä–∞–≤ –∫–æ–º–∞–Ω–¥—É /start"
        await event.respond(response)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    balance = get_balance_from_database(sender_id)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cows = get_cows_from_database(sender_id)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    goats = get_goats_from_database(sender_id)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—à–∞–¥–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    horse = get_horse_from_database(sender_id)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    chickens = get_chickens_from_database(sender_id)

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    shop_buttons = [
        Button.inline(" üêÑ (1200$)", b"buy_cow"),
        Button.inline("üêê (650$)", b"buy_goat"),
        Button.inline(" üêé (5000$)", b"buy_horse"),
        Button.inline("üêì (200$)", b"buy_chicken"), # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—É—Ä
        Button.inline("üîö–ú–µ–Ω—é", b"menub")
    ]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
    shop_keyboard = [shop_buttons[i:i+2] for i in range(0, len(shop_buttons), 2)]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –º–∞–≥–∞–∑–∏–Ω–∞
    response = (
        f"--------------------------------------------------------------\n"
        f"üíé–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}$\n\n"
        f"üêÑ: 2 –º–æ–ª–æ–∫–∞ –≤ —Å—É—Ç–∫–∏(–∑–∞ 1)ü•õ\n"
        f"üêê: 1 –º–æ–ª–æ–∫–∞ –≤ —Å—É—Ç–∫–∏(–∑–∞ 1)ü•õ\n"
        f"üêé: Coming soon\n"
        f"üêì: 4 —è–π—Ü–æ –≤ —Å—É—Ç–∫–∏(–∑–∞ 1 –∫—É—Ä–∏—Ü—É 2 —è–π—Ü–∞ –≤ –ø–æ–ª –¥–Ω—è)ü•ö\n\n"
        "üõí–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?"
    )
    await event.respond(response, buttons=shop_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞
@bot.on(events.CallbackQuery())
async def shop_callback_handler(event):
    sender_id = event.sender_id

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –∫–æ—Ä–æ–≤—ã
    if event.data == b"buy_cow":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        balance = get_balance_from_database(sender_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–Ω–µ–≥ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∫–æ—Ä–æ–≤—ã
        if balance >= 1200:
            # –ï—Å–ª–∏ —Ö–≤–∞—Ç–∞–µ—Ç, —Ç–æ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–æ–≤—ã —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–º—É –∫–æ—Ä–æ–≤—É
            update_user_balance(sender_id, balance - 1200)
            update_user_cows(sender_id, get_cows_from_database(sender_id) + 1)
            await event.answer("–í—ã –∫—É–ø–∏–ª–∏ –∫–æ—Ä–æ–≤—É!")
        else:
            await event.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–æ—Ä–æ–≤—ã")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –ª–æ—à–∞–¥–µ–π
    elif event.data == b"buy_horse":
      # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        balance = get_balance_from_database(sender_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–Ω–µ–≥ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ª–æ—à–∞–¥–∏
        if balance >= 5000:
            # –ï—Å–ª–∏ —Ö–≤–∞—Ç–∞–µ—Ç, —Ç–æ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ—à–∞–¥—å —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–º—É –ª–æ—à–∞–¥—å
            update_user_balance(sender_id, balance - 5000)
            update_user_horse(sender_id, get_chickens_from_database(sender_id) + 1)
            await event.answer("–í—ã –∫—É–ø–∏–ª–∏ –ª–æ—à–∞–¥—å!")
        else:
            await event.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ª–æ—à–∞–¥–∏")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –∫—É—Ä
    elif event.data == b"buy_chicken":
      # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        balance = get_balance_from_database(sender_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–Ω–µ–≥ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∫—É—Ä
        if balance >= 200:
            # –ï—Å–ª–∏ —Ö–≤–∞—Ç–∞–µ—Ç, —Ç–æ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–º—É –∫—É—Ä
            update_user_balance(sender_id, balance - 200)
            update_user_chickens(sender_id, get_chickens_from_database(sender_id) + 1)
            await event.answer("–í—ã –∫—É–ø–∏–ª–∏ –∫—É—Ä–∏—Ü—É!")
        else:
            await event.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—É—Ä")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –∫–æ–∑—ã
    elif event.data == b"buy_goat":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        balance = get_balance_from_database(sender_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–Ω–µ–≥ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∫–æ–∑—ã
        if balance >= 650:
            # –ï—Å–ª–∏ —Ö–≤–∞—Ç–∞–µ—Ç, —Ç–æ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–∑—ã —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–º—É –∫–æ–∑—É
            update_user_balance(sender_id, balance - 650)
            update_user_goats(sender_id, get_goats_from_database(sender_id) + 1)
            await event.answer("–í—ã –∫—É–ø–∏–ª–∏ –∫–æ–∑—É!")
        else:
            await event.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–æ–∑—ã")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    elif event.data == b"menub":
        await menu_handler(event)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
    #await shop_handler(event)

@bot.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    sender_id = event.sender_id
    username = get_username_from_database(sender_id)
    if not username:
        response = "üëãüèª–ü—Ä–∏–≤–µ—Ç!\n\n ‚ö†Ô∏è/help"
        await event.respond(response)
        return
    balance = get_balance_from_database(sender_id)
    response = f"üëãüèª–ü—Ä–∏–≤–µ—Ç, @{username}!\n\n‚ö†Ô∏è/help"
    await event.respond(response)

@bot.on(events.NewMessage(pattern='/help'))
async def help_handler(event):
     response = (
        f"üëãüèª–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏: \n\n"
        f"üíÄ/start - —Ç—ã —É–∂–µ –∂–º—è–∫–∞–ª, –æ–Ω–∞ –Ω—É–∂–Ω–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞(—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ)\n\n"
        f"‚ö†Ô∏è/help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
        f"üïã/menu - –º–µ–Ω—é\n\n"
        f"üè¨/shop - –º–∞–≥–∞–∑–∏–Ω\n\n"
        f"üõç/sell - –ø—Ä–æ–¥–∞—Ç—å –º–æ–ª–æ—á–∫–æ –∏ —è–π—Ü–∞\n\n"
        f"üåΩ/profile - –ø—Ä–æ—Ñ–∏–ª—å\n\n\n"
        f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤—Ä–µ–º—è–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è!"
    )
     await event.respond(response)

@bot.on(events.NewMessage(pattern='/menu'))
async def menu_handler(event):
    user_id = event.sender_id
    menu_buttons = [
        Button.inline('–ü—Ä–æ—Ñ–∏–ª—å', b'profile_b'),
        Button.inline('–ú–∞–≥–∞–∑–∏–Ω', b'shop_b'),
        Button.inline('–ü—Ä–æ–¥–∞—Ç—å', b'sell_b'),
        Button.inline('–ö–≤–µ—Å—Ç—ã', b'quest_b'),
        Button.inline('–õ–æ–∫–∞—Ü–∏–∏', b'locations_b')
    ]
    response = '–ú–µ–Ω—é\n\n–≠—Ç–æ –ø–æ–ª–µ –Ω—É–∂–Ω–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏! –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ–π –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω.\n\n–£–¥–∞—á–∏, —Ñ–µ—Ä–º–µ—Äüòä!'
    await event.respond(response, buttons=menu_buttons)


async def button_handler(event, handler_function):
    response = await handler_function(event)
    if response:
        menu_buttons = [
            Button.inline('–ú–∞–≥–∞–∑–∏–Ω', b'shop_b'),
            Button.inline('–ü—Ä–æ–¥–∞—Ç—å', b'sell_b')
        ]
        await event.respond(response, buttons=menu_buttons)
    else:
        pass
        #await event.respond(–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)


@bot.on(events.CallbackQuery(pattern=b'profile_b'))
async def profile_button_handler(event):
    await button_handler(event, profile_handler)


@bot.on(events.CallbackQuery(pattern=b'shop_b'))
async def shop_button_handler(event):
    await button_handler(event, shop_handler)


@bot.on(events.CallbackQuery(pattern=b'sell_b'))
async def sell_button_handler(event):
    await button_handler(event, sell_handler)


@bot.on(events.CallbackQuery(pattern=b'quest_b'))
async def quest_button_handler(event):
    await button_handler(event, quests_handler)


@bot.on(events.CallbackQuery(pattern=b'locations_b'))
async def locations_button_handler(event):
    await button_handler(event, locations_handler) 

@bot.on(events.NewMessage(pattern='/sell'))
async def sell_handler(event):
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å
    user_id = event.sender_id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
    sell_buttons = [
        Button.inline('ü•ö', b'sell_egg'),
        Button.inline('ü•õ', b'sell_milk'),
        Button.inline('ü•©', b'sell_meat'),
        Button.inline('üêü', b'sell_fish')
    ]
    await event.respond('üë®‚Äçüåæ–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–æ–¥–∞—Ç—å?\n\n üìä–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:\n\nü•ö - 0.5$\nü•õ - 1$\nü•© - 1$\nüêü - 0.3$\n\n‚ö†Ô∏è–ü—Ä–æ–¥–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É –≤—Å–µ!!', buttons=sell_buttons)

@bot.on(events.CallbackQuery(pattern=b'sell_egg'))
async def sell_eggs_handler(event):
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å
    user_id = event.sender_id

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∏—Ü, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å
    am = get_egg_from_database(user_id)

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é sell_egg
    res = sell_egg(user_id, am)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback_query.data —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 'sell_eggs'
    if event.data.decode() == 'sell_egg':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        await event.respond(res)

@bot.on(events.CallbackQuery(pattern=b'sell_meat'))
async def sell_meat_handler(event):
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å
    user_id = event.sender_id

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∏—Ü, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å
    am = get_meat_from_database(user_id)

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é sell_egg
    res = sell_meat(user_id, am)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback_query.data —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 'sell_eggs'
    if event.data.decode() == 'sell_meat':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        await event.respond(res)

@bot.on(events.CallbackQuery(pattern=b'sell_milk'))
async def sell_milk_handler(event):
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å
    user_id = event.sender_id

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–ª–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å
    amount = get_milk_from_database(user_id)

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é sell_milk
    result = sell_milk(user_id, amount)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback_query.data —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 'sell_milk'
    if event.data.decode() == 'sell_milk':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        await event.respond(result)

@bot.on(events.CallbackQuery(pattern=b'sell_fish'))
async def sell_fish_handler(event):
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å
    user_id = event.sender_id

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–ª–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å
    amount = get_fish_from_database(user_id)

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é sell_milk
    result = sell_fish(user_id, amount)

    if event.data.decode() == 'sell_fish':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        await event.respond(result)

@bot.on(events.NewMessage())
async def normal_handler(event):
    sender_id = event.sender_id
    user = await event.get_sender()
    exp = get_exp_from_database(sender_id)
    username = user.username if user.username is not None else user.first_name + ' ' + user.last_name
    add_user_to_database(sender_id, username)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    balance = get_balance_from_database(sender_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_user_balance(sender_id, balance)
    update_level(sender_id, exp)

def main():
    #update_thread = threading.Thread(target=update_db)
    #update_thread.start()
    #–µ—Å–ª–∏ –Ω–∞–¥–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏ null –Ω–∞ 0, —Ä–µ–¥–∞—á —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
    meat_thread = threading.Thread(target=farm_meat)
    meat_thread.start()
    egg_thread = threading.Thread(target=farm_egg)
    egg_thread.start()
    milk_thread = threading.Thread(target=farm_milk)  # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ farm_milk
    milk_thread.start()  # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π
    bot.run_until_disconnected()

if __name__ == '__main__':
    main()